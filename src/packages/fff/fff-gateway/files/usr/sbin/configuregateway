#!/bin/sh
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.


# IMPORTANT!!
# DO NOT RUN THIS IN CRONJOB!

BOARD="$(uci get board.model.name)"
. /etc/network.$BOARD

#load uci functions
. /lib/functions.sh
. /usr/share/libubox/jshn.sh

#load fff functions
. /lib/functions/fff/wireless
. /lib/functions/fff/network
. /lib/fuctions/fff/keyxchange

#set hostname
if uci get gateway.@gateway[0].name; then
    uci set system.@system[0].hostname=$(uci get gateway.@gateway[0].name)
else
    echo "WARNING: No gateway name set!"
fi

#set ipaddr
if uci get gateway.@gateway[0].ipaddr; then
    uci set network.mesh.ipaddr=$(uci get gateway.@gateway[0].ipaddr)
    uci set network.mesh.ip4table='fff'
    uci set network.mesh.ip6table='fff'
else
    echo "WARNING: No ipaddr set!"
fi

#set ip6addr
if uci get gateway.@gateway[0].ip6addr; then
    uci add_list network.mesh.ip6addr=$(uci get gateway.@gateway[0].ip6addr)
else
    echo "WARNING: No ip6addr set!"
fi

#set dhcp
uci del dhcp.mesh
if uci get gateway.@dhcp[0].start && uci get gateway.@dhcp[0].limit; then
    uci set dhcp.mesh=dhcp
    uci set dhcp.mesh.interface=mesh
    uci set dhcp.mesh.start=$(uci get gateway.@dhcp[0].start)
    uci set dhcp.mesh.limit=$(uci get gateway.@dhcp[0].limit)
    uci set dhcp.mesh.leasetime='12h'
else
    echo "WARNING: No DHCP range start and/or limit set!"
fi


#set dns-servers
uci delete dhcp.@dnsmasq[0].server
if uci get gateway.@dns[0].server; then
    for f in $(uci get gateway.@dns[0].server); do
        uci add_list dhcp.@dnsmasq[0].server=$f
        uci add_list dhcp.@dnsmasq[0].server="/in-addr.arpa/$f"
        uci add_list dhcp.@dnsmasq[0].server="/ip6.arpa/$f"
    done
else
    echo "WARNING: No DNS servers set!"
fi


## HOODFILE
if [ -s "$hoodfilecopy" ]; then
    json_load "$(cat "$hoodfilecopy")"

    # ULA
    json_select network
    json_get_var prefix ula_prefix
    json_select ".."
    # Set $prefix::MAC as IP
    if [ -n "$prefix" ] ; then
        prefix="$(echo "$prefix" | sed -e 's,\\,,')"
        addr="$(ipMacAssemble "$prefix" "br-mesh")"
        addr="$(ipTidyColon "$addr")"
        addr_eui="$(ipEUIAssemble "$prefix" "br-mesh")"
        addr_eui="$(ipTidyColon "$addr_eui")"

        # remove old ula addresses
        for ip in $(uci get network.mesh.ip6addr); do
            if ( echo "$ip" | grep -e "fd43:" ); then
                uci del_list network.mesh.ip6addr="$ip"
            fi
        done

        # add new addresses
        if ! ( uci get network.mesh.ip6addr | grep -q "$addr" ) ; then
            uci add_list network.mesh.ip6addr="$addr"
            echo "Set ULA address to br-mesh: $addr"
        else
            echo "Address already set."
        fi
        # Set $prefix::link-local as IP
        if ! ( uci get network.mesh.ip6addr | grep -q "$addr_eui" ) ; then
            uci add_list network.mesh.ip6addr="$addr_eui"
            echo "Set ULA EUI-64 address to br-mesh: $addr_eui"
        else
            echo "Address already set."
        fi
    fi

    # WIFI
    json_select hood
    json_get_var hood name
    json_get_var mesh_id mesh_id
    json_get_var mesh_bssid mesh_bssid
    json_get_var mesh_essid mesh_essid
    json_get_var essid essid
    json_get_var chan2ghz channel2
    json_get_var mesh_type2 mesh_type2
    json_get_var chan5ghz channel5
    json_get_var mesh_type5 mesh_type5
    json_select ".."

    echo "Setting hood name: $hood"
    uci -q set "system.@system[0].hood=$hood"
    uci -q commit system

    if ! wifiDelIface; then
        echo "Can't delete current wifi setup"
        exit 1
    fi

    if ([ -n "$chan2ghz" ] && [ -n "$chan5ghz" ]) ; then
        for phy in $(iw phy | awk '/^Wiphy/{ print $2 }'); do
            radio="$(wifiAddPhyCond "$phy" "2" "$chan2ghz")"
            radio5="$(wifiAddPhyCond "$phy" "5" "$chan5ghz")"
            [ -n "$radio5" ] && radio="$radio5"

            if ! wifiAddAP "$radio" "$essid" "mesh" "ap" "0"; then
                echo "Can't add AP interface on $radio."
                exit 1
            fi

            # add config ap
            iface="configap2"
            if [ -n "$radio5" ]; then
                iface="configap5"
            fi
            uci set network.${iface}=interface
            uci set network.${iface}.proto='static'
            uci set network.${iface}.ip6addr='fe80::1/64'
            if ! wifiAddAP "$radio" "config.franken.freifunk.net" "$iface" "configap" "1"; then
                echo "Can't add Config interface on $radio."
                exit 1
            fi

            # add 802.11s mesh if type == "802.11s"
            if ( [ -n "$radio5" ] && [ "$mesh_type5" == "802.11s" ] ) || [ "$mesh_type2" == "802.11s" ]; then
                if ! wifiAddMesh "$radio" "$mesh_id"; then
                    echo "Can't add Mesh interface on $radio."
                    exit 1
                fi
            fi

            # add IBSS mesh if type == "ibss"
            if ( [ -n "$radio5" ] && [ "$mesh_type5" == "ibss" ] ) || [ "$mesh_type2" == "ibss" ]; then
                if ! wifiAddAdHocMesh "$radio" "$mesh_essid" "$mesh_bssid"; then
                    echo "Can't add AdHocMesh interface on $radio."
                    exit 1
                fi
            fi
        done
    fi

    # LOCATION
    json_select "hood"
    json_select "location"
    json_get_var lat lat
    json_get_var lon lon
    json_select ".."
    json_select ".."

    if [ -n "$lat" ] && [ -n "$lon" ]; then
        uci -q set "fff.system.latitude=$lat"
        uci -q set "fff.system.longitude=$lon"
    fi
else
    echo "WARNING: No hoodfile!"
fi

## BABEL CONFIG
# remove peers missing in gateway config
remove_peer() {
    local name="$1"
    if ! echo $name | grep cfg > /dev/null; then # do not delete default interface
        if ! uci get gateway.$name; then
            # remove interface
            uci del network.$name
            # remove babel interface
            uci del babeld.$name
        fi
    fi
}

config_load babeld
config_foreach remove_peer interface


#add new peers
add_peer() {
    local name="$1"
    local vlan
    local type

    if echo $name | grep cfg > /dev/null; then
        echo "ERROR: Invalid name for peer!"
        return
    fi

    if uci get gateway.$name.vlan; then
        vlan=$(uci get gateway.$name.vlan)
    else
        echo "ERROR: No VLAN set for peer $name!"
        return
    fi

    if uci get gateway.$name.type; then
        type=$(uci get gateway.$name.type)
    else
        type=wired
    fi

    # add vlan
    # VLAN's don't get removed if peer is removed!
    uci set network.eth0_$vlan=switch_vlan
    uci set network.eth0_$vlan.device=$(swconfig list | awk '{ print $4 }')
    uci set network.eth0_$vlan.vlan=$vlan
    uci set network.eth0_$vlan.ports="$BABEL_PORTS"

    # add interface
    uci set network.$name=interface
    uci set network.$name.proto=static
    uci set network.$name.ifname=eth0.$vlan
    # peer_ip
    if uci get gateway.@gateway[0].peer_ip; then
        uci set network.$name.ipaddr=$(uci get gateway.@gateway[0].peer_ip)
    else if uci get gateway.@gateway[0].ipaddr; then
        # use ipaddr (without subnet) if no peer_ip set
        uci set network.$name.ipaddr=$(uci get gateway.@gateway[0].ipaddr | cut -d / -f1)
    else
        echo "FATAL: Neither peer_ip nor ipaddr set! No peering ipv4 set!"
    fi
    # peer_ip6
    if uci get gateway.@gateway[0].peer_ip6; then
        uci set network.$name.ip6addr=$(uci get gateway.@gateway[0].peer_ip6)
    fi

    # add babel interface
    uci set babeld.$name=interface
    uci set babeld.$name.ifname=$name
    uci set babeld.$name.type=$type
}

config_load gateway
config_foreach add_peer peer


exit 0
